#-------------------------------------------------------------------------------
# GENERAL
#-------------------------------------------------------------------------------
#[general]
# Import additional configuration files.
# Imports are loaded in order, skipping all missing files, with the importing
# file being loaded last. If a field is already present in a previous import, it
# will be replaced.
# All imports must either be absolute paths starting with /, paths relative to
# the user's home directory starting with ~/, or paths relative from the current
# config file.
# Example:
#     import = [
#       "~/.config/alacritty/base16-dark.toml",
#       "~/.config/alacritty/keybindings.toml",
#       "alacritty-theme/themes/gruvbox_dark.toml",
#     ]
#import = ["<string>",]

# Directory the shell is started in. When this is unset, or "None", the working
# directory of the parent process will be used.
# Default: "None"
#working_directory = "<string>" | "None"

# Live config reload (changes require restart)
# Default: true
#live_config_reload = true | false

# Offer IPC using alacritty msg
# Default: true
#ipc_socket = true | false # (unix only)
#-------------------------------------------------------------------------------
# ENV
#-------------------------------------------------------------------------------
# All key-value pairs in the [env] section will be added as environment
# variables for any process spawned by Alacritty, including its shell. Some
# entries may override variables set by alacritty itself.
# Example:
#     [env]
#     WINIT_X11_SCALE_FACTOR = "1.0"
#[env]
#-------------------------------------------------------------------------------
# WINDOW
#-------------------------------------------------------------------------------
[window]
# Window dimensions (changes require restart).
# Number of lines/columns (not pixels) in the terminal. Both lines and columns
# must be non-zero for this to take effect. The number of columns must be at
# least 2, while using a value of 0 for columns and lines will fall back to the
# window manager's recommended size
# Default: { columns = 0, lines = 0 }
#dimensions = { columns = <integer>, lines = <integer> }

# Window startup position.
# Specified in number of pixels.
# If the position is "None", the window manager will handle placement.
# Default: "None"
#position = "None" | { x = <integer>, y = <integer> } # (has no effect on Wayland)

# Blank space added around the window in pixels. This padding is scaled by DPI
# and the specified value is always added at both opposing sides.
# Default: { x = 0, y = 0 }
#padding = { x = <integer>, y = <integer> }
padding = { x = 5, y = 5 }

# Spread additional padding evenly around the terminal content.
# Default: false
#dynamic_padding = true | false

# Window decorations.
# Full: Borders and title bar.
# None: Neither borders nor title bar.
# Transparent (macOS only): Title bar, transparent background and title bar
# buttons.
# Buttonless (macOS only): Title bar, transparent background and no title bar
# buttons.
# Default: "Full"
#decorations = "Full" | "None" | "Transparent" | "Buttonless"

# Background opacity as a floating point number from 0.0 to 1.0. The value 0.0
# is completely transparent and 1.0 is opaque.
# Default: 1.0
#opacity = <float>

# Request compositor to blur content behind transparent windows.
# Default: false
#blur = true | false # (works on macOS/KDE Wayland)

# Startup mode (changes require restart)
# Windowed: Regular window.
# Maximized: The window will be maximized on startup.
# Fullscreen: The window will be fullscreened on startup.
# SimpleFullscreen (macOS only): Same as Fullscreen, but you can stack windows
# on top.
# Default: "Windowed"
#startup_mode = "Windowed" | "Maximized" | "Fullscreen" | "SimpleFullscreen"

# Window title.
# Default: "Alacritty"
#title = "<string>"

# Allow terminal applications to change Alacritty's window title.
# Default: true
#dynamic_title = true | false

# Window class.
# On Wayland, general is used as app_id and instance is ignored.
# Default: { instance = "Alacritty", general = "Alacritty" }
#class = { instance = "<string>", general = "<string>" } # (Linux/BSD only)

# Override the variant of the System theme/GTK theme/Wayland client side
# decorations. Set this to "None" to use the system's default theme variant.
# Default: "None"
#decorations_theme_variant = "Dark" | "Light" | "None"

# Prefer resizing window by discrete steps equal to cell dimensions.
# Default: false
#resize_increments = true | false # (works on macOS/X11)

# Make Option key behave as Alt.
# Default: "None"
#option_as_alt = "OnlyLeft" | "OnlyRight" | "Both" | "None" # (macOS only)

# Example:
#     [window]
#     padding = { x = 3, y = 3 }
#     dynamic_padding = true
#     opacity = 0.9
#-------------------------------------------------------------------------------
# SCROLLING
#-------------------------------------------------------------------------------
#[scrolling]
# Maximum number of lines in the scrollback buffer.
# Specifying 0 will disable scrolling.
# Limited to 100000.
# Default: 10000
#history = <integer>

# Number of line scrolled for every input scroll increment.
# Default: 3
#multiplier = <integer>
#-------------------------------------------------------------------------------
# FONT
#-------------------------------------------------------------------------------
[font]
# Default:
#     Linux/BSD: { family = "monospace", style = "Regular" }
#     Windows: { family = "Consolas", style = "Regular" }
#     macOS: { family = "Menlo", style = "Regular" }
#normal = { family = "<string>", style = "<string>" }
normal = { family = "Cousine Nerd Font Mono", style = "Regular" }

# If the family is not specified, it will fall back to the value specified for
# the normal font.
# Default: { style = "Bold" }
#bold = { family = "<string>", style = "<string>" }

# If the family is not specified, it will fall back to the value specified for
# the normal font.
# Default: { style = "Italic" }
#italic = { family = "<string>", style = "<string>" }

# If the family is not specified, it will fall back to the value specified for
# the normal font.
# Default: { style = "Bold Italic" }
#bold_italic = { family = "<string>", style = "<string>" }

# Font size in points.
# Default: 11.25
#size = <float>

# Offset is the extra space around each character. y can be thought of as
# modifying the line spacing, and x as modifying the letter spacing.
# Default: { x = 0, y = 0 }
#offset = { x = <integer>, y = <integer> }

# Glyph offset determines the locations of the glyphs within their cells with
# the default being at the bottom. Increasing x moves the glyph to the right,
# increasing y moves the glyph upward.
#glyph_offset = { x = <integer>, y = <integer> }

# When true, Alacritty will use a custom built-in font for box drawing
# characters (Unicode points U+2500 - U+259F), legacy computing symbols
# (U+1FB00 - U+1FB3B), and powerline symbols (U+E0B0 - U+E0B3).
# Default: true
#builtin_box_drawing = true | false
#-------------------------------------------------------------------------------
# COLORS
#-------------------------------------------------------------------------------
# Colors are specified using their hexadecimal values with a # prefix: #RRGGBB.
[colors]
# Colors which should be used to draw the terminal cursor.
# Allowed values are hexadecimal colors like #ff00ff, or
# CellForeground/CellBackground, which references the affected cell.
# Default: { text = "CellBackground", cursor = "CellForeground" }
#cursor = { text = "<string>", cursor = "<string>" }

# Colors for the cursor when the vi mode is active.
# Allowed values are hexadecimal colors like #ff00ff, or
# CellForeground/CellBackground, which references the affected cell.
# Default: { text = "CellBackground", cursor = "CellForeground" }
#vi_mode_cursor = { text = "<string>", cursor = "<string>" }

# Color used for the indicator displaying the position in history during search
# and vi mode.
# Setting this to "None" will use the opposing primary color.
# Default: { foreground = "None", background = "None" }
#line_indicator = { foreground = "<string>", background = "<string>" }

# Color used for the footer bar on the bottom, used by search regex input,
# hyperlink URI preview, etc.
# Default: { foreground = "#181818", background = "#d8d8d8" }
#footer_bar = { foreground = "<string>", background = "<string>" }

# Colors used for drawing selections.
# Allowed values are hexadecimal colors like #ff00ff, or
# CellForeground/CellBackground, which references the affected cell.
# Default: { text = "CellBackground", background = "CellForeground" }
#selection = { text = "<string>", background = "<string>" }

# The indexed colors include all colors from 16 to 256. When these are not set,
# they're filled with sensible defaults.
# Default: []
#indexed_colors = [{ index = <integer>, color = "<string>" },]

# Whether or not window.opacity applies to all cell backgrounds, or only to the
# default background. When set to true all cells will be transparent regardless
# of their background color.
# Default: false
#transparent_background_colors = true | false

# When true, bold text is drawn using the bright color variants.
# Default: false
#draw_bold_text_with_bright_colors = true | false
#-------------------------------------------------------------------------------
# COLORS - PRIMARY
#-------------------------------------------------------------------------------
    [colors.primary]
#    Default: "#d8d8d8"
#    foreground = "<string>"
    foreground = "#FFFFFF"

#    Default: "#181818"
#    background = "<string>"
    background = "#000000"

#    If this is not set, the color is automatically calculated based on the
#    foreground color.
#    Default: "#828482"
#    dim_foreground = "<string>"

#    This color is only used when draw_bold_text_with_bright_colors is true.
#    If this is not set, the normal foreground will be used.
#    Default: "None"
#    bright_foreground = "<string>"
#-------------------------------------------------------------------------------
# COLORS - SEARCH
#-------------------------------------------------------------------------------
#    Allowed values are hexadecimal colors like #ff00ff, or
#    CellForeground/CellBackground, which references the affected cell.
#    [colors.search]
#    Default: { foreground = "#181818", background = "#ac4242" }
#    matches = { foreground = "<string>", background = "<string>" }

#    Default: { foreground = "#181818", background = "#f4bf75" }
#    focused_match = { foreground = "<string>", background = "<string>" }
#-------------------------------------------------------------------------------
# COLORS - HINTS
#-------------------------------------------------------------------------------
#    [colors.hints]
#    First character in the hint label.
#    Allowed values are hexadecimal colors like #ff00ff, or
#    CellForeground/CellBackground, which references the affected cell.
#    Default: { foreground = "#181818", background = "#f4bf75" }
#    start = { foreground = "<string>", background = "<string>" }

#    All characters after the first one in the hint label.
#    Allowed values are hexadecimal colors like #ff00ff, or
#    CellForeground/CellBackground, which references the affected cell.
#    Default: { foreground = "#181818", background = "#ac4242" }
#    end = { foreground = "<string>", background = "<string>" }
#-------------------------------------------------------------------------------
# COLORS - NORMAL
#-------------------------------------------------------------------------------
    [colors.normal]
#    Default: "#181818"
#    black = "<string>"
    black = "#000000"

#    Default: "#ac4242"
#    red = "<string>"
    red = "#AA0000"

#    Default: "#90a959"
#    green = "<string>"
    green = "#00AA00"

#    Default: "#f4bf75"
#    yellow = "<string>"
    yellow = "#AA5500"

#    Default: "#6a9fb5"
#    blue = "<string>"
    blue = "#0000AA"

#    Default: "#aa759f"
#    magenta = "<string>"
    magenta = "#AA00AA"

#    Default: "#75b5aa"
#    cyan = "<string>"
    cyan = "#00AAAA"

#    Default: "#d8d8d8"
#    white = "<string>"
    white = "#AAAAAA"
#-------------------------------------------------------------------------------
# COLORS - BRIGHT
#-------------------------------------------------------------------------------
    [colors.bright]
#    Default: "#6b6b6b"
#    black = "<string>"
    black = "#555555"

#    Default: "#c55555"
#    red = "<string>"
    red = "#FF5555"

#    Default: "#aac474"
#    green = "<string>"
    green = "#55FF55"

#    Default: "#feca88"
#    yellow = "<string>"
    yellow = "#FFFF55"

#    Default: "#82b8c8"
#    blue = "<string>"
    blue = "#5555FF"

#    Default: "#c28cb8"
#    magenta = "<string>"
    magenta = "#FF55FF"

#    Default: "#93d3c3"
#    cyan = "<string>"
    cyan = "#55FFFF"

#    Default: "#f8f8f8"
#    white = "<string>"
    white = "#FFFFFF"
#-------------------------------------------------------------------------------
# COLORS - DIM
#-------------------------------------------------------------------------------
#    If the dim colors are not set, they will be calculated automatically based
#    on the normal colors.
#    [colors.dim]
#    Default: "#0f0f0f"
#    black = "<string>"

#    Default: "#712b2b"
#    red = "<string>"

#    Default: "#5f6f3a"
#    green = "<string>"

#    Default: "#a17e4d"
#    yellow = "<string>"

#    Default: "#456877"
#    blue = "<string>"

#    Default: "#704d68"
#    magenta = "<string>"

#    Default: "#4d7770"
#    cyan = "<string>"

#    Default: "#8e8e8e"
#    white = "<string>"
#-------------------------------------------------------------------------------
# BELL
#-------------------------------------------------------------------------------
#[bell]
# Visual bell animation effect for flashing the screen when the visual bell is
# rung.
# Default: "Linear"
#animation = "Ease" | "EaseOut" | "EaseOutSine" | "EaseOutQuad" |
#    "EaseOutCubic" | "EaseOutQuart" | "EaseOutQuint" | "EaseOutExpo" |
#    "EaseOutCirc" | "Linear"

# Duration of the visual bell flash in milliseconds. A `duration` of `0` will
# disable the visual bell animation.
# Default: 0
#duration = <integer>

# Visual bell animation color.
# Default: "#ffffff"
#color = "<string>"

# This program is executed whenever the bell is rung.
# When set to "None", no command will be executed.
# Default: "None"
#command = "<string>" | { program = "<string>", args = ["<string>",] }
#-------------------------------------------------------------------------------
# SELECTION
#-------------------------------------------------------------------------------
#[selection]
# This string contains all characters that are used as separators for "semantic
# words" in Alacritty.
# Default: ",│`|:\"' ()[]{}<>\t"
#semantic_escape_chars = "<string>"

# When set to true, selected text will be copied to the primary clipboard.
# Default: false
#save_to_clipboard = true | false
#-------------------------------------------------------------------------------
# CURSOR
#-------------------------------------------------------------------------------
[cursor]
#style = { <shape>, <blinking> }
style = { shape = "Block", blinking = "On" }
#    Default: "Block"
#    shape = "Block" | "Underline" | "Beam"

#    Never: Prevent the cursor from ever blinking
#    Off: Disable blinking by default
#    On: Enable blinking by default
#    Always: Force the cursor to always blink
#    Default: "Off"
#    blinking = "Never" | "Off" | "On" | "Always"

# If the vi mode cursor style is "None" or not specified, it will fall back to
# the active value of the normal cursor.
# Default: "None"
#vi_mode_style = { <shape>, <blinking> } | "None"

# Cursor blinking interval in milliseconds.
# Default: 750
#blink_interval = <integer>

# Time after which cursor stops blinking, in seconds.
# Specifying 0 will disable timeout for blinking.
# Default: 5
#blink_timeout = <integer>

# When this is true, the cursor will be rendered as a hollow box when the window
# is not focused.
# Default: true
#unfocused_hollow = true | false

# Thickness of the cursor relative to the cell width as floating point number
# from 0.0 to 1.0.
# Default: 0.15
#thickness = <float>
#-------------------------------------------------------------------------------
# TERMINAL
#-------------------------------------------------------------------------------
#[terminal]
# You can set shell.program to the path of your favorite shell, e.g. /bin/zsh.
# Entries in shell.args are passed as arguments to the shell.
# Default:
#     Linux/BSD/macOS: $SHELL or the user's login shell, if $SHELL is unset
#     Windows: "powershell"
# Example:
#     [shell]
#     program = "/bin/zsh"
#     args = ["-l"]
#shell = "<string>" | { program = "<string>", args = ["<string>",] }

# Controls the ability to write to the system clipboard with the OSC 52 escape
# sequence. While this escape sequence is useful to copy contents from the
# remote server, allowing any application to read from the clipboard can be
# easily abused while not providing significant benefits over explicitly pasting
# text.
# Default: "OnlyCopy"
#osc52 = "Disabled" | "OnlyCopy" | "OnlyPaste" | "CopyPaste"
#-------------------------------------------------------------------------------
# MOUSE
#-------------------------------------------------------------------------------
[mouse]
# When this is true, the cursor is temporarily hidden when typing.
# Default: false
#hide_when_typing = true | false
hide_when_typing = true

# See keyboard.bindings for full documentation on mods, mode, command, chars,
# and action.
# When an application running within Alacritty captures the mouse, the `Shift`
# modifier can be used to suppress mouse reporting. If no action is found for
# the event, actions for the event without the `Shift` modifier are triggered
# instead.
# Example:
#     [mouse]
#     bindings = [
#         { mouse = "Right", mods = "Control", action = "Paste" },
#     ]
#bindings = [{ <mouse>, <mods>, <mode>, <command> | <chars> | <action> },]
#    Mouse button which needs to be pressed to trigger this binding.
#    mouse = "Middle" | "Left" | "Right" | "Back" | "Forward" | <integer>

#    ExpandSelection: Expand the selection to the current mouse cursor location.
#    action = <keyboard.bindings.action> | "ExpandSelection"
#-------------------------------------------------------------------------------
# HINTS
#-------------------------------------------------------------------------------
# Terminal hints can be used to find text or hyperlinks in the visible part of
# the terminal and pipe it to other applications.
#[hints]
# Keys used for the hint labels.
# Default: "jfkdls;ahgurieowpq"
#alphabet = "<string>"

# Array with all available hints.
# Each hint must have at least one of regex or hyperlinks and either an action
# or a command.
# Default:
#    [[hints.enabled]]
#    command = "xdg-open" # On Linux/BSD
#    # command = "open" # On macOS
#    # command = { program = "cmd", args = [ "/c", "start", "" ] } # On Windows
#    hyperlinks = true
#    post_processing = true
#    persist = false
#    mouse.enabled = true
#    binding = { key = "O", mods = "Control|Shift" }
#    regex = "(ipfs:|ipns:|magnet:|mailto:|gemini://|gopher://|https://|http://|news:|file:|git://|ssh:|ftp://)[^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
#enabled = [{ <regex>, <hyperlinks>, <post_processing>, <persist>, <action>,
#    <command>, <binding>, <mouse> },]

#    Regex each line will be compared against.
#    regex = "<string>"

#    When this is true, all OSC 8 escape sequence hyperlinks will be included in
#    the hints.
#    hyperlinks = true | false

#    When this is true, heuristics will be used to shorten the match if there
#    are characters likely not to be part of the hint (e.g. a trailing .). This
#    is most useful for URIs and applies only to regex matches.
#    post_processing = true | false

#    When this is true, hints remain persistent after selection.
#    persist = true | false

#    Copy: Copy the hint's text to the clipboard.
#    Paste: Paste the hint's text to the terminal or search.
#    Select: Select the hint's text.
#    MoveViModeCursor: Move the vi mode cursor to the beginning of the hint.
#    action = "Copy" | "Paste" | "Select" | "MoveViModeCursor"

#    Command which will be executed when the hint is clicked or selected with
#    the binding.
#    The hint's text is always attached as the last argument.
#    command = "<string>" | { program = "<string>", args = ["<string>",] }

#    See keyboard.bindings for documentation on available values.
#    This controls which key binding is used to start the keyboard hint
#    selection process.
#    binding = { key = "<string>", mods = "<string>", mode = "<string>" }

#    See keyboard.bindings for documentation on available mods.
#    The enabled field controls if the hint should be underlined when hovering
#    over the hint text with all mods pressed.
#    mouse = { mods = "<string>", enabled = true | false }
#-------------------------------------------------------------------------------
# KEYBOARD
#-------------------------------------------------------------------------------
#[keyboard]
# To unset a default binding, you can use the action "ReceiveChar" to remove it
# or "None" to inhibit any action.
# Multiple keybindings can be triggered by a single key press and will be
# executed in the order they are defined in.
# Default: See alacritty-bindings(5)
# Example:
#    [keyboard]
#    bindings = [
#        { key = "N", mods = "Control|Shift", action = "CreateNewWindow" },
#        { key = "L", mods = "Control|Shift", chars = "l" },
#    ]
#bindings = [{ <key>, <mods>, <mode>, <command> | <chars> | <action> },]

#    The regular keys like "A", "0", and "Я" can be mapped directly without any
#    special syntax. Full list of named keys like "F1" and the syntax for dead
#    keys can be found here:
#    https://docs.rs/winit/latest/winit/keyboard/enum.NamedKey.html
#    https://docs.rs/winit/latest/winit/keyboard/enum.Key.html#variant
#    Dead Numpad keys are prefixed by Numpad: "NumpadEnter" | "NumpadAdd" |
#        "NumpadComma" | "NumpadDecimal" | "NumpadDivide" | "NumpadEquals" |
#        "NumpadSubtract" | "NumpadMultiply" | "Numpad[0-9]".
#    The key field also supports using scancodes, which are specified as a
#    decimal number.
#    key = "<string>"

#    Multiple modifiers can be combined using |, like this: "Control | Shift".
#    mods = "Command" | "Control" | "Option" | "Super" | "Shift" | "Alt"

#    This defines a terminal mode which must be active for this binding to have
#    an effect.
#    Prepending ~ to a mode will require the mode to not = be active for the
#    binding to take effect.
#    Multiple modes can be combined using |, like this: "~Vi|Search".
#    mode = "AppCursor" | "AppKeypad" | "Search" | "Alt" | "Vi"

#    Fork and execute the specified command.
#    command = "<string>" | { program = "<string>", args = ["<string>",] }

#    Writes the specified string to the terminal.
#    chars = "<string>"

#    action:
#    ReceiveChar: Allow receiving char input.
#    None: No action.
#    Paste: Paste contents of system clipboard.
#    Copy: Store current selection into clipboard.
#    IncreaseFontSize: Increase font size.
#    DecreaseFontSize: Decrease font size.
#    ResetFontSize: Reset font size to the config value.
#    ScrollPageUp: Scroll exactly one page up.
#    ScrollPageDown: Scroll exactly one page down.
#    ScrollHalfPageUp: Scroll half a page up.
#    ScrollHalfPageDown: Scroll half a page down.
#    ScrollLineUp: Scroll one line up.
#    ScrollLineDown: Scroll one line down.
#    ScrollToTop: Scroll all the way to the top.
#    ScrollToBottom: Scroll all the way to the bottom.
#    ClearHistory: Clear the display buffer(s) to remove history.
#    Hide: Hide the Alacritty window.
#    Minimize: Minimize the Alacritty window.
#    Quit: Quit Alacritty.
#    ClearLogNotice: Clear warning and error notices.
#    SpawnNewInstance: Spawn a new instance of Alacritty.
#    CreateNewWindow: Create a new Alacritty window.
#    ToggleFullscreen: Toggle fullscreen.
#    ToggleMaximized: Toggle maximized.
#    ClearSelection: Clear active selection.
#    ToggleViMode: Toggle vi mode.
#    SearchForward: Start a forward buffer search.
#    SearchBackward: Start a backward buffer search.

#    Vi mode actions:
#    Up: Move up.
#    Down: Move down.
#    Left: Move left.
#    Right: Move right.
#    First: First column, or beginning of the line when already at the first
#    column.
#    Last: Last column, or beginning of the line when already at the last
#    column.
#    FirstOccupied: First non-empty cell in this terminal row, or first
#    non-empty
#    cell of the line when already at the first cell of the row.
#    High: Move to top of screen.
#    Middle: Move to center of screen.
#    Low: Move to bottom of screen.
#    SemanticLeft: Move to start of semantically separated word.
#    SemanticRight: Move to start of next semantically separated word.
#    SemanticLeftEnd: Move to end of previous semantically separated word.
#    SemanticRightEnd: Move to end of semantically separated word.
#    WordLeft: Move to start of whitespace separated word.
#    WordRight: Move to start of next whitespace separated word.
#    WordLeftEnd: Move to end of previous whitespace separated word.
#    WordRightEnd: Move to end of whitespace separated word.
#    Bracket: Move to opposing bracket.
#    ToggleNormalSelection: Toggle normal vi selection.
#    ToggleLineSelection: Toggle line vi selection.
#    ToggleBlockSelection: Toggle block vi selection.
#    ToggleSemanticSelection: Toggle semantic vi selection.
#    SearchNext: Jump to the beginning of the next match.
#    SearchPrevious: Jump to the beginning of the previous match.
#    SearchStart: Jump to the next start of a match to the left of the origin.
#    SearchEnd: Jump to the next end of a match to the right of the origin.
#    Open: Launch the URL below the vi mode cursor.
#    CenterAroundViCursor: Centers the screen around the vi mode cursor.
#    InlineSearchForward: Search forward within the current line.
#    InlineSearchBackward: Search backward within the current line.
#    InlineSearchForwardShort: Search forward within the current line, stopping
#    just short of the character.
#    InlineSearchBackwardShort: Search backward within the current line,
#    stopping
#    just short of the character.
#    InlineSearchNext: Jump to the next inline search match.
#    InlineSearchPrevious: Jump to the previous inline search match.

#    Search actions:
#    SearchFocusNext: Move the focus to the next search match.
#    SearchFocusPrevious: Move the focus to the previous search match.
#    SearchConfirm: Confirm the active search.
#    SearchCancel: Cancel the active search.
#    SearchClear: Reset the search regex.
#    SearchDeleteWord: Delete the last word in the search regex.
#    SearchHistoryPrevious: Go to the previous regex in the search history.
#    SearchHistoryNext: Go to the next regex in the search history.

#    macOS exclusive:
#    ToggleSimpleFullscreen: Enter fullscreen without occupying another space.
#    HideOtherApplications: Hide all windows other than Alacritty.
#    CreateNewTab: Create new window in a tab.
#    SelectNextTab: Select next tab.
#    SelectPreviousTab: Select previous tab.
#    SelectTab1: Select the first tab.
#    SelectTab2: Select the second tab.
#    SelectTab3: Select the third tab.
#    SelectTab4: Select the fourth tab.
#    SelectTab5: Select the fifth tab.
#    SelectTab6: Select the sixth tab.
#    SelectTab7: Select the seventh tab.
#    SelectTab8: Select the eighth tab.
#    SelectTab9: Select the ninth tab.
#    SelectLastTab: Select the last tab.

#    Linux/BSD exclusive:
#    CopySelection: Copy from the selection buffer.
#    PasteSelection: Paste from the selection buffer.
#-------------------------------------------------------------------------------
# DEBUG
#-------------------------------------------------------------------------------
# Debug options are meant to help troubleshoot issues with Alacritty. These can
# change or be removed entirely without warning, so their stability shouldn't be
# relied upon.
#[debug]
# Display the time it takes to draw each frame.
# Default: false
#render_timer = true | false

# Keep the log file after quitting Alacritty.
# Default: false
#persistent_logging = true | false

# Default: "Warn"
# To add extra libraries to logging ALACRITTY_EXTRA_LOG_TARGETS variable can be
# used.
# Example:
#     ALACRITTY_EXTRA_LOG_TARGETS="winit;vte" alacritty -vvv
#log_level = "Off" | "Error" | "Warn" | "Info" | "Debug" | "Trace"

# Force use of a specific renderer, "None" will use the highest available one.
# Default: "None"
#renderer = "glsl3" | "gles2" | "gles2pure" | "None"

# Log all received window events.
# Default: false
#print_events = true | false

# Highlight window damage information.
# Default: false
#highlight_damage = true | false

# Use EGL as display API if the current platform allows it. Note that
# transparency may not work with EGL on Linux/BSD.
# Default: false
#prefer_egl = true | false
