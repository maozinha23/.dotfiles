[module/separator]
type = custom/script
exec = echo " "
format = <label>
format-background = ${separator.background}
label = %output%
label-font = ${separator.font}
label-padding = 0
interval = 3600
;===============================================================================
[module/menu-apps]
type = custom/menu

; If true, <label-toggle> will be to the left of the menu items (default).
; If false, it will be on the right of all the items.
expand-right = true

; "menu-LEVEL-N" has the same properties as "label-NAME" with
; the additional "exec" property
;
; Commands will be executed using "/bin/sh -c $COMMAND"
menu-0-0 = Internet
menu-0-0-background = ${color.unfocused-background}
menu-0-0-padding = ${label.padding}
menu-0-0-exec = #menu-apps.open.1

menu-0-1 = Office
menu-0-1-background = ${color.unfocused-background}
menu-0-1-padding = ${label.padding}
menu-0-1-exec = #menu-apps.open.2

menu-1-0 = 󰈹 Firefox
menu-1-0-background = ${color.unfocused-background}
menu-1-0-padding = ${label.padding}
menu-1-0-exec = firefox

menu-1-1 = 󰇚 Transmission
menu-1-1-background = ${color.unfocused-background}
menu-1-1-padding = ${label.padding}
menu-1-1-exec = transmission-gtk

menu-2-0 =  LibreOffice
menu-2-0-background = ${color.unfocused-background}
menu-2-0-padding = ${label.padding}
menu-2-0-exec = libreoffice

; Available tags:
;   <label-toggle> (default) - gets replaced with <label-(open|close)>
;   <menu> (default)
; If expand-right is true, the default will be "<label-toggle><menu>" and the
; other way around otherwise.
; Note that if you use <label-toggle> you must also include
; the definition for <label-open>
; format = <label-toggle><menu>

label-open =  i3
label-open-background = ${color.focused-background}
label-open-padding = ${label.padding}

label-close = 󰅖
label-close-background = ${color.urgent-background}
label-close-padding = ${label.padding}

; Optional item separator
; Default: none
label-separator = ${separator.character}
label-separator-font = ${separator.font}
label-separator-background = ${separator.background}
label-separator-padding = ${separator.padding}
;===============================================================================
[module/user]
type = custom/script

; Available tokens:
;   %counter%
; Command to be executed (using "/bin/sh -c [command]")
exec = echo "󰀄 ${USER} 󰟀 ${HOSTNAME}"

; Conditional command that, if defined, needs to exit successfully
; before the main exec command is invoked.
; Default: ""
;exec-if = pgrep -x myservice

; Set this to true for scripts that continuously produce output
; If set to 'true', everytime the script produces a new line of output, the
; module updates.
; Otherwise, only the first line of output is considered and all later lines
; are discarded.
; Default: false
;tail = true

; Seconds to sleep between updates
; Default: 5 (0 if `tail = true`)
interval = 3600

; Interval used when the `exec` command returns with a non-zero exit code
; If not defined, interval is used instead
; Default: (same as interval)
;interval-fail = 300

; Seconds to sleep between `exec-if` invocations
; If not defined, interval is used instead
; Default: (same as interval)
;interval-if = 180

; Set environment variables in the 'exec' script
; env-NAME = VALUE
; env-FOO = BAR

; Available tags:
;   <label> (default)
format = <label>
format-padding = ${label.padding}

; Format used when the `exec` command returns with a non-zero exit code
; Only used with `tail = false`
; If not defined, format is used instead.
; Available tags:
;   <label-fail>
; format-fail = <label-fail>

; Available tokens:
;   %output%
; Default: %output%
label = %output%
label-minlen = ${size.user-label-minlen}
label-maxlen = ${size.user-label-maxlen}
label-alignment = center

; Available tokens:
;   %output%
; Default: %output%
;label-fail = %output:0:15:...%

; Available tokens:
;   %counter%
;   %pid%
;
; "click-(left|middle|right)" will be executed using "/bin/sh -c [command]"
;click-left = echo left %counter%
;click-middle = echo middle %counter%
;click-right = echo right %counter%
;double-click-left = echo double left %counter%
;double-click-middle = echo double middle %counter%
;double-click-right = echo double right %counter%

; Available tokens:
;   %counter%
;   %pid%
;
; "scroll-(up|down)" will be executed using "/bin/sh -c [command]"
;scroll-up = echo scroll up %counter%
;scroll-down = echo scroll down %counter%
